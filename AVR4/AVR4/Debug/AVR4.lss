
AVR4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000256  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000256  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000288  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005a9  00000000  00000000  00000338  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000035d  00000000  00000000  000008e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002f8  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000d8  00000000  00000000  00000f38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000318  00000000  00000000  00001010  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000201  00000000  00000000  00001328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001529  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__dtors_end>
   4:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
   c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  10:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  14:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  18:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  1c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  20:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  24:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  28:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  2c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  30:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  34:	0c 94 b3 00 	jmp	0x166	; 0x166 <__vector_13>
  38:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  3c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  40:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  44:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  48:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  4c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  54:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  58:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  5c:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  60:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>
  64:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__bad_interrupt>

00000068 <__ctors_start>:
  68:	d4 00       	.word	0x00d4	; ????

0000006a <__ctors_end>:
  6a:	d9 00       	.word	0x00d9	; ????

0000006c <__dtors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d8 e0       	ldi	r29, 0x08	; 8
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_clear_bss>:
  78:	21 e0       	ldi	r18, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	01 c0       	rjmp	.+2      	; 0x82 <.do_clear_bss_start>

00000080 <.do_clear_bss_loop>:
  80:	1d 92       	st	X+, r1

00000082 <.do_clear_bss_start>:
  82:	a2 30       	cpi	r26, 0x02	; 2
  84:	b2 07       	cpc	r27, r18
  86:	e1 f7       	brne	.-8      	; 0x80 <.do_clear_bss_loop>

00000088 <__do_global_ctors>:
  88:	10 e0       	ldi	r17, 0x00	; 0
  8a:	c5 e3       	ldi	r28, 0x35	; 53
  8c:	d0 e0       	ldi	r29, 0x00	; 0
  8e:	04 c0       	rjmp	.+8      	; 0x98 <__do_global_ctors+0x10>
  90:	21 97       	sbiw	r28, 0x01	; 1
  92:	fe 01       	movw	r30, r28
  94:	0e 94 de 00 	call	0x1bc	; 0x1bc <__tablejump2__>
  98:	c4 33       	cpi	r28, 0x34	; 52
  9a:	d1 07       	cpc	r29, r17
  9c:	c9 f7       	brne	.-14     	; 0x90 <__do_global_ctors+0x8>
  9e:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  a2:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__do_global_dtors>

000000a6 <__bad_interrupt>:
  a6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000aa <main>:

#include "BOARD_AVR.h"
#include "PrerT1_OVF.h"

int main(void)
{
  aa:	cf 93       	push	r28
  ac:	df 93       	push	r29
  ae:	00 d0       	rcall	.+0      	; 0xb0 <main+0x6>
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
 	sbi(DDRD,LED_RED);  	// cervena svieti pri stlaceni
  b4:	54 9a       	sbi	0x0a, 4	; 10
	sbi(DDRD,LED_BLUE);
  b6:	57 9a       	sbi	0x0a, 7	; 10
	sbi(DDRD,LED_GREEN);
  b8:	52 9a       	sbi	0x0a, 2	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f e7       	ldi	r18, 0x7F	; 127
  bc:	8f e4       	ldi	r24, 0x4F	; 79
  be:	92 e1       	ldi	r25, 0x12	; 18
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x16>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x20>
  ca:	00 00       	nop
	_delay_ms(500);
	  
	sbi(PORTD,LED_BLUE); 	// vsetko zhasne
  cc:	5f 9a       	sbi	0x0b, 7	; 11
	sbi(PORTD,LED_GREEN);
  ce:	5a 9a       	sbi	0x0b, 2	; 11
	sbi(PORTD,LED_RED);
  d0:	5c 9a       	sbi	0x0b, 4	; 11
		   
	PrerT1_OVF timer11;		// objekt timer11 nastavenie  konstruktore
  d2:	ce 01       	movw	r24, r28
  d4:	01 96       	adiw	r24, 0x01	; 1
  d6:	0e 94 86 00 	call	0x10c	; 0x10c <_ZN10PrerT1_OVFC1Ev>
	   
	sei();			    	// globalne povolim prerusenie
  da:	78 94       	sei
	  
	while(1) {
		if(timer11.getTim1()>30) {		// 30 * 100ms = 3s
  dc:	ce 01       	movw	r24, r28
  de:	01 96       	adiw	r24, 0x01	; 1
  e0:	0e 94 a9 00 	call	0x152	; 0x152 <_ZN10PrerT1_OVF7getTim1Ev>
  e4:	4f 97       	sbiw	r24, 0x1f	; 31
  e6:	d0 f3       	brcs	.-12     	; 0xdc <main+0x32>
		   timer11.setTim1(0);
  e8:	60 e0       	ldi	r22, 0x00	; 0
  ea:	70 e0       	ldi	r23, 0x00	; 0
  ec:	ce 01       	movw	r24, r28
  ee:	01 96       	adiw	r24, 0x01	; 1
  f0:	0e 94 ae 00 	call	0x15c	; 0x15c <_ZN10PrerT1_OVF7setTim1Ej>
			  			   
		   cbi(PORTD,LED_GREEN);		// zasvieti
  f4:	5a 98       	cbi	0x0b, 2	; 11
  f6:	2f eb       	ldi	r18, 0xBF	; 191
  f8:	84 ed       	ldi	r24, 0xD4	; 212
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	21 50       	subi	r18, 0x01	; 1
  fe:	80 40       	sbci	r24, 0x00	; 0
 100:	90 40       	sbci	r25, 0x00	; 0
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x52>
 104:	00 c0       	rjmp	.+0      	; 0x106 <main+0x5c>
 106:	00 00       	nop
		   _delay_ms(50);
		   sbi(PORTD,LED_GREEN);		// zhasne
 108:	5a 9a       	sbi	0x0b, 2	; 11
 10a:	e8 cf       	rjmp	.-48     	; 0xdc <main+0x32>

0000010c <_ZN10PrerT1_OVFC1Ev>:
*/


#include "PrerT1_OVF.h"

PrerT1_OVF::PrerT1_OVF()
 10c:	dc 01       	movw	r26, r24
{
	PRR &=~(1<<PRTIM1);			// zapneme TIM0 napriek tomu, ze je def. zapnute
 10e:	e4 e6       	ldi	r30, 0x64	; 100
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	97 7f       	andi	r25, 0xF7	; 247
 116:	90 83       	st	Z, r25
	
	uint8_t sreg = SREG;
 118:	8f b7       	in	r24, 0x3f	; 63
	cli();						// atomicka operacia
 11a:	f8 94       	cli
	TCNT1 = TIMER1_TIMEOUT;
 11c:	2c e6       	ldi	r18, 0x6C	; 108
 11e:	3b ef       	ldi	r19, 0xFB	; 251
 120:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 124:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	SREG = sreg;
 128:	8f bf       	out	0x3f, r24	; 63
	TCCR1B |= d1024;			// nastavenie preddelicky clkio
 12a:	e1 e8       	ldi	r30, 0x81	; 129
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	90 81       	ld	r25, Z
 130:	95 60       	ori	r25, 0x05	; 5
 132:	90 83       	st	Z, r25
	TIMSK1 |= (1<<TOIE1);		// povolenie prerusenia
 134:	ef e6       	ldi	r30, 0x6F	; 111
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	90 81       	ld	r25, Z
 13a:	91 60       	ori	r25, 0x01	; 1
 13c:	90 83       	st	Z, r25
	this->Timer1 = TIMER1_TIMEOUT;
 13e:	11 96       	adiw	r26, 0x01	; 1
 140:	3c 93       	st	X, r19
 142:	2e 93       	st	-X, r18
 144:	08 95       	ret

00000146 <_ZN10PrerT1_OVFD1Ev>:
}

PrerT1_OVF::~PrerT1_OVF()
{
	TIMSK1 &=~(1<<TOIE1);		// zakazanie prerusenia
 146:	ef e6       	ldi	r30, 0x6F	; 111
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	80 83       	st	Z, r24
 150:	08 95       	ret

00000152 <_ZN10PrerT1_OVF7getTim1Ev>:


class PrerT1_OVF Timer01;
/**********************metody public*************************/
uint16_t PrerT1_OVF::getTim1(void){
	return Timer01.Timer1;
 152:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 156:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
};
 15a:	08 95       	ret

0000015c <_ZN10PrerT1_OVF7setTim1Ej>:

void  PrerT1_OVF::setTim1(uint16_t hod){
	Timer01.Timer1 = hod;
 15c:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <_edata+0x1>
 160:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <_edata>
 164:	08 95       	ret

00000166 <__vector_13>:
};


void PrerT1_OVF::OverflowInterrupt1(void) 	// staticka funkcia, nemozeme pouzit this
{
 166:	1f 92       	push	r1
 168:	0f 92       	push	r0
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	0f 92       	push	r0
 16e:	11 24       	eor	r1, r1
 170:	8f 93       	push	r24
 172:	9f 93       	push	r25
 174:	ef 93       	push	r30
 176:	ff 93       	push	r31
	// atomicka operacia
	cli();		// ak som sa ocitol tu, tak muselo byt glob. povolene prerusenie
 178:	f8 94       	cli
	TCNT1 = TIMER1_TIMEOUT;		//restart
 17a:	8c e6       	ldi	r24, 0x6C	; 108
 17c:	9b ef       	ldi	r25, 0xFB	; 251
 17e:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 182:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	sei();
 186:	78 94       	sei
	Timer01.Timer1++;
 188:	e0 e0       	ldi	r30, 0x00	; 0
 18a:	f1 e0       	ldi	r31, 0x01	; 1
 18c:	80 81       	ld	r24, Z
 18e:	91 81       	ldd	r25, Z+1	; 0x01
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	91 83       	std	Z+1, r25	; 0x01
 194:	80 83       	st	Z, r24
	// kod obsluhy
	// 	if(Timer01.Timer1>30)
	//	{	tbi(PORTD,G_LED); 
	//		Timer01.Timer1 = 0; 
	//	}
};
 196:	ff 91       	pop	r31
 198:	ef 91       	pop	r30
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <_GLOBAL__sub_I__ZN10PrerT1_OVFC2Ev>:
	TIMSK1 &=~(1<<TOIE1);		// zakazanie prerusenia
	//	PRR |=(1<<PRTIM1);		// vypneme TIM0 ak chceme setrit, ale pozor nepojde nic
}


class PrerT1_OVF Timer01;
 1a8:	80 e0       	ldi	r24, 0x00	; 0
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	0e 94 86 00 	call	0x10c	; 0x10c <_ZN10PrerT1_OVFC1Ev>
 1b0:	08 95       	ret

000001b2 <_GLOBAL__sub_D__ZN10PrerT1_OVFC2Ev>:
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 a3 00 	call	0x146	; 0x146 <_ZN10PrerT1_OVFD1Ev>
 1ba:	08 95       	ret

000001bc <__tablejump2__>:
 1bc:	ee 0f       	add	r30, r30
 1be:	ff 1f       	adc	r31, r31
 1c0:	05 90       	lpm	r0, Z+
 1c2:	f4 91       	lpm	r31, Z
 1c4:	e0 2d       	mov	r30, r0
 1c6:	09 94       	ijmp

000001c8 <__do_global_dtors>:
 1c8:	10 e0       	ldi	r17, 0x00	; 0
 1ca:	c5 e3       	ldi	r28, 0x35	; 53
 1cc:	d0 e0       	ldi	r29, 0x00	; 0
 1ce:	04 c0       	rjmp	.+8      	; 0x1d8 <__do_global_dtors+0x10>
 1d0:	fe 01       	movw	r30, r28
 1d2:	0e 94 de 00 	call	0x1bc	; 0x1bc <__tablejump2__>
 1d6:	21 96       	adiw	r28, 0x01	; 1
 1d8:	c6 33       	cpi	r28, 0x36	; 54
 1da:	d1 07       	cpc	r29, r17
 1dc:	c9 f7       	brne	.-14     	; 0x1d0 <__do_global_dtors+0x8>
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>


AVR1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000166  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c27  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000572  00000000  00000000  00000f1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004f6  00000000  00000000  0000148d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00001984  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000390  00000000  00000000  00001ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003cc  00000000  00000000  00001e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002220  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 42 00 	call	0x84	; 0x84 <main>
  78:	0c 94 b1 00 	jmp	0x162	; 0x162 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN4AKUCC1Ev>:
#include "AKUC.h"

// default constructor
AKUC::AKUC()
{
	sbi(DDRB,AKU);			//nastavenie vystupu AKU
  80:	21 9a       	sbi	0x04, 1	; 4
  82:	08 95       	ret

00000084 <main>:
#include "TLACIDLO.h"
#include "RGB_LED.h"
#include "UART_BT.h"

int main(void)
{
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x6>
  8a:	1f 92       	push	r1
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	RGB_LED led;			// vytvorenie instancie led triedy RGB_LED konstruktor nastavi vyvody
  90:	ce 01       	movw	r24, r28
  92:	01 96       	adiw	r24, 0x01	; 1
  94:	0e 94 88 00 	call	0x110	; 0x110 <_ZN7RGB_LEDC1Ev>
	AKUC aku;
  98:	ce 01       	movw	r24, r28
  9a:	02 96       	adiw	r24, 0x02	; 2
  9c:	0e 94 40 00 	call	0x80	; 0x80 <_ZN4AKUCC1Ev>
	TLACIDLO tl;			// tl je meno objektu
  a0:	ce 01       	movw	r24, r28
  a2:	03 96       	adiw	r24, 0x03	; 3
  a4:	0e 94 a2 00 	call	0x144	; 0x144 <_ZN8TLACIDLOC1Ev>
*/

	while (1)      //nekonecny cyklus
	{
		// ukazka volania funkcie get_Tlac() pomocou pointra p_tl
		while(!p_tl->get_Tlac()){};   // pokial nie je stlacene stoji v tejto slucke
  a8:	ce 01       	movw	r24, r28
  aa:	03 96       	adiw	r24, 0x03	; 3
  ac:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN8TLACIDLO8get_TlacEv>
  b0:	88 23       	and	r24, r24
  b2:	d1 f3       	breq	.-12     	; 0xa8 <main+0x24>
		led.Zhasni_Vsetko_RGB();
  b4:	ce 01       	movw	r24, r28
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
		led.Zasviet_RGB(true, false, false);
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	40 e0       	ldi	r20, 0x00	; 0
  c0:	61 e0       	ldi	r22, 0x01	; 1
  c2:	ce 01       	movw	r24, r28
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	0e 94 90 00 	call	0x120	; 0x120 <_ZN7RGB_LED11Zasviet_RGBEbbb>
		
		while(!p_tl->get_Tlac()){};
  ca:	ce 01       	movw	r24, r28
  cc:	03 96       	adiw	r24, 0x03	; 3
  ce:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN8TLACIDLO8get_TlacEv>
  d2:	88 23       	and	r24, r24
  d4:	d1 f3       	breq	.-12     	; 0xca <main+0x46>
		led.Zhasni_Vsetko_RGB();
  d6:	ce 01       	movw	r24, r28
  d8:	01 96       	adiw	r24, 0x01	; 1
  da:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
		led.Zasviet_RGB(false, true, false);
  de:	20 e0       	ldi	r18, 0x00	; 0
  e0:	41 e0       	ldi	r20, 0x01	; 1
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	ce 01       	movw	r24, r28
  e6:	01 96       	adiw	r24, 0x01	; 1
  e8:	0e 94 90 00 	call	0x120	; 0x120 <_ZN7RGB_LED11Zasviet_RGBEbbb>
		
		while(!p_tl->get_Tlac()){};
  ec:	ce 01       	movw	r24, r28
  ee:	03 96       	adiw	r24, 0x03	; 3
  f0:	0e 94 a5 00 	call	0x14a	; 0x14a <_ZN8TLACIDLO8get_TlacEv>
  f4:	88 23       	and	r24, r24
  f6:	d1 f3       	breq	.-12     	; 0xec <main+0x68>
		led.Zhasni_Vsetko_RGB();
  f8:	ce 01       	movw	r24, r28
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
		led.Zasviet_RGB(false, false, true);
 100:	21 e0       	ldi	r18, 0x01	; 1
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	60 e0       	ldi	r22, 0x00	; 0
 106:	ce 01       	movw	r24, r28
 108:	01 96       	adiw	r24, 0x01	; 1
 10a:	0e 94 90 00 	call	0x120	; 0x120 <_ZN7RGB_LED11Zasviet_RGBEbbb>
	ua.Uart_send("TOTO je test vysielania AVR_BOARD\n\r");

	while(1){};
*/

	while (1)      //nekonecny cyklus
 10e:	cc cf       	rjmp	.-104    	; 0xa8 <main+0x24>

00000110 <_ZN7RGB_LEDC1Ev>:
	sbi(DDRD,LED_GREEN);
	sbi(DDRD,LED_BLUE);
} //RGB_LED

// default destructor
RGB_LED::~RGB_LED()
 110:	54 9a       	sbi	0x0a, 4	; 10
 112:	52 9a       	sbi	0x0a, 2	; 10
 114:	57 9a       	sbi	0x0a, 7	; 10
 116:	08 95       	ret

00000118 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>:
} //~RGB_LED


void RGB_LED::Zhasni_Vsetko_RGB()
{
	sbi(PORTD,LED_RED);
 118:	5c 9a       	sbi	0x0b, 4	; 11
	sbi(PORTD,LED_GREEN);
 11a:	5a 9a       	sbi	0x0b, 2	; 11
	sbi(PORTD,LED_BLUE);
 11c:	5f 9a       	sbi	0x0b, 7	; 11
 11e:	08 95       	ret

00000120 <_ZN7RGB_LED11Zasviet_RGBEbbb>:
}

void RGB_LED::Zasviet_RGB(bool r, bool g, bool b)
{
 120:	1f 93       	push	r17
 122:	cf 93       	push	r28
 124:	df 93       	push	r29
 126:	16 2f       	mov	r17, r22
 128:	d4 2f       	mov	r29, r20
 12a:	c2 2f       	mov	r28, r18
	this->Zhasni_Vsetko_RGB();
 12c:	0e 94 8c 00 	call	0x118	; 0x118 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
	if(r==true) cbi(PORTD,LED_RED);
 130:	11 11       	cpse	r17, r1
 132:	5c 98       	cbi	0x0b, 4	; 11
	if(g==true) cbi(PORTD,LED_GREEN);
 134:	d1 11       	cpse	r29, r1
 136:	5a 98       	cbi	0x0b, 2	; 11
	if(b==true) cbi(PORTD,LED_BLUE);
 138:	c1 11       	cpse	r28, r1
 13a:	5f 98       	cbi	0x0b, 7	; 11
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	08 95       	ret

00000144 <_ZN8TLACIDLOC1Ev>:
	cbi(DDRB,TL);   //nastavenie smeru
	sbi(PORTB,TL);	//pull/up odpor
} //TLACIDLO

// default destructor
TLACIDLO::~TLACIDLO()
 144:	20 98       	cbi	0x04, 0	; 4
 146:	28 9a       	sbi	0x05, 0	; 5
 148:	08 95       	ret

0000014a <_ZN8TLACIDLO8get_TlacEv>:

 bool TLACIDLO::get_Tlac(void)
{
	bool stav;
	stav = false;
	while((PINB&(1<<TL)) != (1<<TL)){};   // caka pokial tlacidlo nie je pustene 
 14a:	18 9b       	sbis	0x03, 0	; 3
 14c:	fe cf       	rjmp	.-4      	; 0x14a <_ZN8TLACIDLO8get_TlacEv>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14e:	87 e9       	ldi	r24, 0x97	; 151
 150:	9a e3       	ldi	r25, 0x3A	; 58
 152:	01 97       	sbiw	r24, 0x01	; 1
 154:	f1 f7       	brne	.-4      	; 0x152 <_ZN8TLACIDLO8get_TlacEv+0x8>
 156:	00 c0       	rjmp	.+0      	; 0x158 <_ZN8TLACIDLO8get_TlacEv+0xe>
 158:	00 00       	nop
	_delay_ms(5);
	
	if( (PINB&(1<<TL)) != (1<<TL))		// Test stlacenia
 15a:	83 b1       	in	r24, 0x03	; 3
		stav = true;  
	return stav;	
 15c:	80 95       	com	r24
}
 15e:	81 70       	andi	r24, 0x01	; 1
 160:	08 95       	ret

00000162 <_exit>:
 162:	f8 94       	cli

00000164 <__stop_program>:
 164:	ff cf       	rjmp	.-2      	; 0x164 <__stop_program>

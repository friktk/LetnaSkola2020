
AVR0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000541  00000000  00000000  00000260  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000282  00000000  00000000  000007a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000263  00000000  00000000  00000a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00000c88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000025d  00000000  00000000  00000d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000206  00000000  00000000  00000f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001183  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include "BOARD_AVR.h"
#include "RGB_LED.h"

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
  
	RGB_LED led;        // vytvorenie instancie led triedy RGB_LED, konstruktor nastavi vyvody
  8a:	ce 01       	movw	r24, r28
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	0e 94 86 00 	call	0x10c	; 0x10c <_ZN7RGB_LEDC1Ev>

	//nekonecny cyklus
	while(1)
    {
		
		led.Zasviet_RGB(true, false, false);
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	40 e0       	ldi	r20, 0x00	; 0
  96:	61 e0       	ldi	r22, 0x01	; 1
  98:	ce 01       	movw	r24, r28
  9a:	01 96       	adiw	r24, 0x01	; 1
  9c:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN7RGB_LED11Zasviet_RGBEbbb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	2f e7       	ldi	r18, 0x7F	; 127
  a2:	8f e4       	ldi	r24, 0x4F	; 79
  a4:	92 e1       	ldi	r25, 0x12	; 18
  a6:	21 50       	subi	r18, 0x01	; 1
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	90 40       	sbci	r25, 0x00	; 0
  ac:	e1 f7       	brne	.-8      	; 0xa6 <main+0x26>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <main+0x30>
  b0:	00 00       	nop
		_delay_ms(500);
		led.Zhasni_Vsetko_RGB();
  b2:	ce 01       	movw	r24, r28
  b4:	01 96       	adiw	r24, 0x01	; 1
  b6:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
		led.Zasviet_RGB(false, true, false);
  ba:	20 e0       	ldi	r18, 0x00	; 0
  bc:	41 e0       	ldi	r20, 0x01	; 1
  be:	60 e0       	ldi	r22, 0x00	; 0
  c0:	ce 01       	movw	r24, r28
  c2:	01 96       	adiw	r24, 0x01	; 1
  c4:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN7RGB_LED11Zasviet_RGBEbbb>
  c8:	2f e7       	ldi	r18, 0x7F	; 127
  ca:	8f e4       	ldi	r24, 0x4F	; 79
  cc:	92 e1       	ldi	r25, 0x12	; 18
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	80 40       	sbci	r24, 0x00	; 0
  d2:	90 40       	sbci	r25, 0x00	; 0
  d4:	e1 f7       	brne	.-8      	; 0xce <main+0x4e>
  d6:	00 c0       	rjmp	.+0      	; 0xd8 <main+0x58>
  d8:	00 00       	nop
		_delay_ms(500);
		led.Zhasni_Vsetko_RGB();
  da:	ce 01       	movw	r24, r28
  dc:	01 96       	adiw	r24, 0x01	; 1
  de:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
		led.Zasviet_RGB(false, false, true);
  e2:	21 e0       	ldi	r18, 0x01	; 1
  e4:	40 e0       	ldi	r20, 0x00	; 0
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	ce 01       	movw	r24, r28
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN7RGB_LED11Zasviet_RGBEbbb>
  f0:	2f e7       	ldi	r18, 0x7F	; 127
  f2:	8f e4       	ldi	r24, 0x4F	; 79
  f4:	92 e1       	ldi	r25, 0x12	; 18
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x76>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x80>
 100:	00 00       	nop
		_delay_ms(500);
		led.Zhasni_Vsetko_RGB();
 102:	ce 01       	movw	r24, r28
 104:	01 96       	adiw	r24, 0x01	; 1
 106:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
 10a:	c3 cf       	rjmp	.-122    	; 0x92 <main+0x12>

0000010c <_ZN7RGB_LEDC1Ev>:
	sbi(DDRD,LED_GREEN);
	sbi(DDRD,LED_BLUE);
} //RGB_LED

// default destructor
RGB_LED::~RGB_LED()
 10c:	54 9a       	sbi	0x0a, 4	; 10
 10e:	52 9a       	sbi	0x0a, 2	; 10
 110:	57 9a       	sbi	0x0a, 7	; 10
 112:	08 95       	ret

00000114 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>:
} //~RGB_LED


void RGB_LED::Zhasni_Vsetko_RGB()
{
	sbi(PORTD,LED_RED);
 114:	5c 9a       	sbi	0x0b, 4	; 11
	sbi(PORTD,LED_GREEN);
 116:	5a 9a       	sbi	0x0b, 2	; 11
	sbi(PORTD,LED_BLUE);
 118:	5f 9a       	sbi	0x0b, 7	; 11
 11a:	08 95       	ret

0000011c <_ZN7RGB_LED11Zasviet_RGBEbbb>:
}

void RGB_LED::Zasviet_RGB(bool r, bool g, bool b)
{
 11c:	1f 93       	push	r17
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	16 2f       	mov	r17, r22
 124:	d4 2f       	mov	r29, r20
 126:	c2 2f       	mov	r28, r18
	this->Zhasni_Vsetko_RGB();
 128:	0e 94 8a 00 	call	0x114	; 0x114 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
	if(r==true) cbi(PORTD,LED_RED);
 12c:	11 11       	cpse	r17, r1
 12e:	5c 98       	cbi	0x0b, 4	; 11
	if(g==true) cbi(PORTD,LED_GREEN);
 130:	d1 11       	cpse	r29, r1
 132:	5a 98       	cbi	0x0b, 2	; 11
	if(b==true) cbi(PORTD,LED_BLUE);
 134:	c1 11       	cpse	r28, r1
 136:	5f 98       	cbi	0x0b, 7	; 11
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>


Foto2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000012  00800100  0000039a  0000040e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000039a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000450  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000128  00000000  00000000  00000490  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001488  00000000  00000000  000005b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004ba  00000000  00000000  00001a40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000075c  00000000  00000000  00001efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002cc  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e5  00000000  00000000  00002924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c03  00000000  00000000  00002f09  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000108  00000000  00000000  00003b0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e9       	ldi	r30, 0x9A	; 154
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 31       	cpi	r26, 0x12	; 18
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  8e:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_ZN7RGB_LEDC1Ev>:
	ADCSRA |= (1<<ADSC);		// start
	while((ADCSRA & (1<<ADIF))!=(1<<ADIF)){}; // caka na koniec prevodu
	uint8_t ppom=ADCH;
	ADCSRA |=(1<<ADIF);   		// alternativa k vynulovaniu ADIF
	return ppom;
};
  96:	54 9a       	sbi	0x0a, 4	; 10
  98:	52 9a       	sbi	0x0a, 2	; 10
  9a:	57 9a       	sbi	0x0a, 7	; 10
  9c:	08 95       	ret

0000009e <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>:
  9e:	5c 9a       	sbi	0x0b, 4	; 11
  a0:	5a 9a       	sbi	0x0b, 2	; 11
  a2:	5f 9a       	sbi	0x0b, 7	; 11
  a4:	08 95       	ret

000000a6 <_ZN4AKUCC1Ev>:
  a6:	21 9a       	sbi	0x04, 1	; 4
  a8:	08 95       	ret

000000aa <_ZN8TLACIDLOC1Ev>:
  aa:	20 98       	cbi	0x04, 0	; 4
  ac:	28 9a       	sbi	0x05, 0	; 5
  ae:	08 95       	ret

000000b0 <_ZN4ADC1C1Ev>:
  b0:	e4 e6       	ldi	r30, 0x64	; 100
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	8e 7f       	andi	r24, 0xFE	; 254
  b8:	80 83       	st	Z, r24
  ba:	08 95       	ret

000000bc <_ZN4ADC111Set_CHANNELEh>:
  bc:	ec e7       	ldi	r30, 0x7C	; 124
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	80 7f       	andi	r24, 0xF0	; 240
  c4:	80 83       	st	Z, r24
  c6:	80 81       	ld	r24, Z
  c8:	6f 70       	andi	r22, 0x0F	; 15
  ca:	68 2b       	or	r22, r24
  cc:	60 83       	st	Z, r22
  ce:	08 95       	ret

000000d0 <_ZN4ADC17Set_REFEh>:
  d0:	ec e7       	ldi	r30, 0x7C	; 124
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8f 73       	andi	r24, 0x3F	; 63
  d8:	80 83       	st	Z, r24
  da:	80 81       	ld	r24, Z
  dc:	62 95       	swap	r22
  de:	66 0f       	add	r22, r22
  e0:	66 0f       	add	r22, r22
  e2:	60 7c       	andi	r22, 0xC0	; 192
  e4:	68 2b       	or	r22, r24
  e6:	60 83       	st	Z, r22
  e8:	08 95       	ret

000000ea <_ZN4ADC17Get_ADCEv>:
  ea:	ec e7       	ldi	r30, 0x7C	; 124
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	8f 7d       	andi	r24, 0xDF	; 223
  f2:	80 83       	st	Z, r24
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	80 83       	st	Z, r24
  fe:	80 81       	ld	r24, Z
 100:	84 ff       	sbrs	r24, 4
 102:	fd cf       	rjmp	.-6      	; 0xfe <_ZN4ADC17Get_ADCEv+0x14>
 104:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
 108:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	90 61       	ori	r25, 0x10	; 16
 114:	90 83       	st	Z, r25
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	92 2b       	or	r25, r18
 11a:	08 95       	ret

0000011c <main>:
#include "..\Foto1\ADC.h"
#include "..\Foto1\ADC.cpp"
#include "UART_BT.h"

int main(void)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	00 d0       	rcall	.+0      	; 0x122 <main+0x6>
 122:	00 d0       	rcall	.+0      	; 0x124 <main+0x8>
 124:	1f 92       	push	r1
 126:	cd b7       	in	r28, 0x3d	; 61
 128:	de b7       	in	r29, 0x3e	; 62
  	RGB_LED r;
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	0e 94 4b 00 	call	0x96	; 0x96 <_ZN7RGB_LEDC1Ev>
	AKUC a;
 132:	ce 01       	movw	r24, r28
 134:	02 96       	adiw	r24, 0x02	; 2
 136:	0e 94 53 00 	call	0xa6	; 0xa6 <_ZN4AKUCC1Ev>
	TLACIDLO t;
 13a:	ce 01       	movw	r24, r28
 13c:	03 96       	adiw	r24, 0x03	; 3
 13e:	0e 94 55 00 	call	0xaa	; 0xaa <_ZN8TLACIDLOC1Ev>
	UART_BT uart;
 142:	ce 01       	movw	r24, r28
 144:	04 96       	adiw	r24, 0x04	; 4
 146:	0e 94 ef 00 	call	0x1de	; 0x1de <_ZN7UART_BTC1Ev>
	   
	uart.Uart_init();   //115200, 8N1
 14a:	ce 01       	movw	r24, r28
 14c:	04 96       	adiw	r24, 0x04	; 4
 14e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <_ZN7UART_BT9Uart_initEv>
	uart.Uart_send("Tets fotoodpora\n\r");
 152:	60 e0       	ldi	r22, 0x00	; 0
 154:	71 e0       	ldi	r23, 0x01	; 1
 156:	ce 01       	movw	r24, r28
 158:	04 96       	adiw	r24, 0x04	; 4
 15a:	0e 94 14 01 	call	0x228	; 0x228 <_ZN7UART_BT9Uart_sendEPKc>
	   
	r.Zhasni_Vsetko_RGB();
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	0e 94 4f 00 	call	0x9e	; 0x9e <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
	
	ADC1 adc;
 166:	ce 01       	movw	r24, r28
 168:	05 96       	adiw	r24, 0x05	; 5
 16a:	0e 94 58 00 	call	0xb0	; 0xb0 <_ZN4ADC1C1Ev>
	PRR |=(1<<PRADC);			// zakaze ADC
} //~ADC1

void ADC1::Init_ADC(uint8_t hod, bool rezim){   // false - progr.start
	hod=hod&0x7;
	ADCSRA =0b10000000|hod;		// ADEN, ADSC, ADATE, ADIF, ADIE,ADPS2,1,0
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	adc.Init_ADC(4, false);  //hodiny/64	 jednorazovy prevod
	adc.Set_CHANNEL(6);
 174:	66 e0       	ldi	r22, 0x06	; 6
 176:	ce 01       	movw	r24, r28
 178:	05 96       	adiw	r24, 0x05	; 5
 17a:	0e 94 5e 00 	call	0xbc	; 0xbc <_ZN4ADC111Set_CHANNELEh>
	adc.Set_REF(1);		// Avcc
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	ce 01       	movw	r24, r28
 182:	05 96       	adiw	r24, 0x05	; 5
 184:	0e 94 68 00 	call	0xd0	; 0xd0 <_ZN4ADC17Set_REFEh>
	 	   
   while (1)
   {
		uart.Uart_send(adc.Get_ADC());
 188:	ce 01       	movw	r24, r28
 18a:	05 96       	adiw	r24, 0x05	; 5
 18c:	0e 94 75 00 	call	0xea	; 0xea <_ZN4ADC17Get_ADCEv>
 190:	bc 01       	movw	r22, r24
 192:	ce 01       	movw	r24, r28
 194:	04 96       	adiw	r24, 0x04	; 4
 196:	0e 94 a2 01 	call	0x344	; 0x344 <_ZN7UART_BT9Uart_sendEi>
	    uart.Uart_send("\r");
 19a:	60 e1       	ldi	r22, 0x10	; 16
 19c:	71 e0       	ldi	r23, 0x01	; 1
 19e:	ce 01       	movw	r24, r28
 1a0:	04 96       	adiw	r24, 0x04	; 4
 1a2:	0e 94 14 01 	call	0x228	; 0x228 <_ZN7UART_BT9Uart_sendEPKc>
		  
		if(adc.Get_ADC() < 300)
 1a6:	ce 01       	movw	r24, r28
 1a8:	05 96       	adiw	r24, 0x05	; 5
 1aa:	0e 94 75 00 	call	0xea	; 0xea <_ZN4ADC17Get_ADCEv>
 1ae:	8c 32       	cpi	r24, 0x2C	; 44
 1b0:	91 40       	sbci	r25, 0x01	; 1
 1b2:	34 f4       	brge	.+12     	; 0x1c0 <main+0xa4>
	sbi(PORTD,LED_BLUE);
}

void RGB_LED::Zasviet_RGB(bool r, bool g, bool b)
{
	this->Zhasni_Vsetko_RGB();
 1b4:	ce 01       	movw	r24, r28
 1b6:	01 96       	adiw	r24, 0x01	; 1
 1b8:	0e 94 4f 00 	call	0x9e	; 0x9e <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
	if(r==true) cbi(PORTD,LED_RED);
 1bc:	5c 98       	cbi	0x0b, 4	; 11
 1be:	05 c0       	rjmp	.+10     	; 0x1ca <main+0xae>
	sbi(PORTD,LED_BLUE);
}

void RGB_LED::Zasviet_RGB(bool r, bool g, bool b)
{
	this->Zhasni_Vsetko_RGB();
 1c0:	ce 01       	movw	r24, r28
 1c2:	01 96       	adiw	r24, 0x01	; 1
 1c4:	0e 94 4f 00 	call	0x9e	; 0x9e <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
	if(r==true) cbi(PORTD,LED_RED);
	if(g==true) cbi(PORTD,LED_GREEN);
	if(b==true) cbi(PORTD,LED_BLUE);
 1c8:	5f 98       	cbi	0x0b, 7	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ca:	8f ef       	ldi	r24, 0xFF	; 255
 1cc:	9e e9       	ldi	r25, 0x9E	; 158
 1ce:	24 e2       	ldi	r18, 0x24	; 36
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	20 40       	sbci	r18, 0x00	; 0
 1d6:	e1 f7       	brne	.-8      	; 0x1d0 <main+0xb4>
 1d8:	00 c0       	rjmp	.+0      	; 0x1da <main+0xbe>
 1da:	00 00       	nop
 1dc:	d5 cf       	rjmp	.-86     	; 0x188 <main+0x6c>

000001de <_ZN7UART_BTC1Ev>:


void UART_BT::Uart_send_bytes(char* data, const uint8_t len)
{
	for(uint8_t i=0; i < len; i++) this->Uart_send_char(*(data++));
};
 1de:	e4 e6       	ldi	r30, 0x64	; 100
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	8d 7f       	andi	r24, 0xFD	; 253
 1e6:	80 83       	st	Z, r24
 1e8:	08 95       	ret

000001ea <_ZN7UART_BT9Uart_initEv>:
 1ea:	51 9a       	sbi	0x0a, 1	; 10
 1ec:	50 98       	cbi	0x0a, 0	; 10
 1ee:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 1f2:	8b e9       	ldi	r24, 0x9B	; 155
 1f4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
 1f8:	e2 ec       	ldi	r30, 0xC2	; 194
 1fa:	f0 e0       	ldi	r31, 0x00	; 0
 1fc:	80 81       	ld	r24, Z
 1fe:	86 60       	ori	r24, 0x06	; 6
 200:	80 83       	st	Z, r24
 202:	e1 ec       	ldi	r30, 0xC1	; 193
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	88 61       	ori	r24, 0x18	; 24
 20a:	80 83       	st	Z, r24
 20c:	e0 ec       	ldi	r30, 0xC0	; 192
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	82 60       	ori	r24, 0x02	; 2
 214:	80 83       	st	Z, r24
 216:	08 95       	ret

00000218 <_ZN7UART_BT14Uart_send_charEh>:
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	80 81       	ld	r24, Z
 21e:	85 ff       	sbrs	r24, 5
 220:	fd cf       	rjmp	.-6      	; 0x21c <_ZN7UART_BT14Uart_send_charEh+0x4>
 222:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 226:	08 95       	ret

00000228 <_ZN7UART_BT9Uart_sendEPKc>:

void UART_BT::Uart_send( const char* data) {
 228:	0f 93       	push	r16
 22a:	1f 93       	push	r17
 22c:	cf 93       	push	r28
 22e:	df 93       	push	r29
 230:	eb 01       	movw	r28, r22
	for ( const char* s = data; *s; ++s) {
 232:	68 81       	ld	r22, Y
 234:	66 23       	and	r22, r22
 236:	41 f0       	breq	.+16     	; 0x248 <_ZN7UART_BT9Uart_sendEPKc+0x20>
 238:	8c 01       	movw	r16, r24
 23a:	21 96       	adiw	r28, 0x01	; 1
		this->Uart_send_char( *s);
 23c:	c8 01       	movw	r24, r16
 23e:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN7UART_BT14Uart_send_charEh>
{
	for(uint8_t i=0; i < len; i++) this->Uart_send_char(*(data++));
};

void UART_BT::Uart_send( const char* data) {
	for ( const char* s = data; *s; ++s) {
 242:	69 91       	ld	r22, Y+
 244:	61 11       	cpse	r22, r1
 246:	fa cf       	rjmp	.-12     	; 0x23c <_ZN7UART_BT9Uart_sendEPKc+0x14>
		this->Uart_send_char( *s);
	}
};
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	0f 91       	pop	r16
 250:	08 95       	ret

00000252 <_ZN7UART_BT9Uart_sendEm>:
		num = -num;
	}
	this->Uart_send( ( unsigned long) num);
};

void UART_BT::Uart_send( unsigned long num) {
 252:	8f 92       	push	r8
 254:	9f 92       	push	r9
 256:	af 92       	push	r10
 258:	bf 92       	push	r11
 25a:	cf 92       	push	r12
 25c:	df 92       	push	r13
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	1f 93       	push	r17
 264:	cf 93       	push	r28
 266:	df 93       	push	r29
 268:	cd b7       	in	r28, 0x3d	; 61
 26a:	de b7       	in	r29, 0x3e	; 62
 26c:	2a 97       	sbiw	r28, 0x0a	; 10
 26e:	0f b6       	in	r0, 0x3f	; 63
 270:	f8 94       	cli
 272:	de bf       	out	0x3e, r29	; 62
 274:	0f be       	out	0x3f, r0	; 63
 276:	cd bf       	out	0x3d, r28	; 61
 278:	6c 01       	movw	r12, r24
 27a:	cb 01       	movw	r24, r22
 27c:	ba 01       	movw	r22, r20
	// max pocet signed/unsigned long je 10
	char digits[10];
	uint8_t len = 0;
 27e:	10 e0       	ldi	r17, 0x00	; 0
	do {
		digits[len] = '0' + ( num % 10);
 280:	0f 2e       	mov	r0, r31
 282:	fa e0       	ldi	r31, 0x0A	; 10
 284:	8f 2e       	mov	r8, r31
 286:	91 2c       	mov	r9, r1
 288:	a1 2c       	mov	r10, r1
 28a:	b1 2c       	mov	r11, r1
 28c:	f0 2d       	mov	r31, r0
 28e:	ee 24       	eor	r14, r14
 290:	e3 94       	inc	r14
 292:	f1 2c       	mov	r15, r1
 294:	ec 0e       	add	r14, r28
 296:	fd 1e       	adc	r15, r29
 298:	e1 0e       	add	r14, r17
 29a:	f1 1c       	adc	r15, r1
 29c:	a5 01       	movw	r20, r10
 29e:	94 01       	movw	r18, r8
 2a0:	0e 94 a9 01 	call	0x352	; 0x352 <__udivmodsi4>
 2a4:	60 5d       	subi	r22, 0xD0	; 208
 2a6:	f7 01       	movw	r30, r14
 2a8:	60 83       	st	Z, r22
		len++;
 2aa:	1f 5f       	subi	r17, 0xFF	; 255

void UART_BT::Uart_send( unsigned long num) {
	// max pocet signed/unsigned long je 10
	char digits[10];
	uint8_t len = 0;
	do {
 2ac:	62 2f       	mov	r22, r18
 2ae:	73 2f       	mov	r23, r19
 2b0:	84 2f       	mov	r24, r20
 2b2:	95 2f       	mov	r25, r21
 2b4:	61 15       	cp	r22, r1
 2b6:	71 05       	cpc	r23, r1
 2b8:	81 05       	cpc	r24, r1
 2ba:	91 05       	cpc	r25, r1
 2bc:	41 f7       	brne	.-48     	; 0x28e <_ZN7UART_BT9Uart_sendEm+0x3c>
		digits[len] = '0' + ( num % 10);
		len++;
	} while ( num /= 10);
	while ( len > 0) {
 2be:	11 23       	and	r17, r17
 2c0:	69 f0       	breq	.+26     	; 0x2dc <_ZN7UART_BT9Uart_sendEm+0x8a>
		this->Uart_send_char( digits[--len]);
 2c2:	11 50       	subi	r17, 0x01	; 1
 2c4:	e1 e0       	ldi	r30, 0x01	; 1
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	ec 0f       	add	r30, r28
 2ca:	fd 1f       	adc	r31, r29
 2cc:	e1 0f       	add	r30, r17
 2ce:	f1 1d       	adc	r31, r1
 2d0:	60 81       	ld	r22, Z
 2d2:	c6 01       	movw	r24, r12
 2d4:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN7UART_BT14Uart_send_charEh>
	uint8_t len = 0;
	do {
		digits[len] = '0' + ( num % 10);
		len++;
	} while ( num /= 10);
	while ( len > 0) {
 2d8:	11 11       	cpse	r17, r1
 2da:	f3 cf       	rjmp	.-26     	; 0x2c2 <_ZN7UART_BT9Uart_sendEm+0x70>
		this->Uart_send_char( digits[--len]);
	}
};
 2dc:	2a 96       	adiw	r28, 0x0a	; 10
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	1f 91       	pop	r17
 2ee:	ff 90       	pop	r15
 2f0:	ef 90       	pop	r14
 2f2:	df 90       	pop	r13
 2f4:	cf 90       	pop	r12
 2f6:	bf 90       	pop	r11
 2f8:	af 90       	pop	r10
 2fa:	9f 90       	pop	r9
 2fc:	8f 90       	pop	r8
 2fe:	08 95       	ret

00000300 <_ZN7UART_BT9Uart_sendEl>:
	for ( const char* s = data; *s; ++s) {
		this->Uart_send_char( *s);
	}
};

void UART_BT::Uart_send( long num) {
 300:	cf 92       	push	r12
 302:	df 92       	push	r13
 304:	ef 92       	push	r14
 306:	ff 92       	push	r15
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
 30e:	6a 01       	movw	r12, r20
 310:	7b 01       	movw	r14, r22
	if ( num < 0) {
 312:	77 23       	and	r23, r23
 314:	5c f4       	brge	.+22     	; 0x32c <_ZN7UART_BT9Uart_sendEl+0x2c>
		this->Uart_send_char( '-');
 316:	6d e2       	ldi	r22, 0x2D	; 45
 318:	0e 94 0c 01 	call	0x218	; 0x218 <_ZN7UART_BT14Uart_send_charEh>
		num = -num;
 31c:	f0 94       	com	r15
 31e:	e0 94       	com	r14
 320:	d0 94       	com	r13
 322:	c0 94       	com	r12
 324:	c1 1c       	adc	r12, r1
 326:	d1 1c       	adc	r13, r1
 328:	e1 1c       	adc	r14, r1
 32a:	f1 1c       	adc	r15, r1
	}
	this->Uart_send( ( unsigned long) num);
 32c:	b7 01       	movw	r22, r14
 32e:	a6 01       	movw	r20, r12
 330:	ce 01       	movw	r24, r28
 332:	0e 94 29 01 	call	0x252	; 0x252 <_ZN7UART_BT9Uart_sendEm>
};
 336:	df 91       	pop	r29
 338:	cf 91       	pop	r28
 33a:	ff 90       	pop	r15
 33c:	ef 90       	pop	r14
 33e:	df 90       	pop	r13
 340:	cf 90       	pop	r12
 342:	08 95       	ret

00000344 <_ZN7UART_BT9Uart_sendEi>:
		this->Uart_send_char( digits[--len]);
	}
};

void UART_BT::Uart_send( int num) {
	this->Uart_send((long) num);
 344:	ab 01       	movw	r20, r22
 346:	77 0f       	add	r23, r23
 348:	66 0b       	sbc	r22, r22
 34a:	77 0b       	sbc	r23, r23
 34c:	0e 94 80 01 	call	0x300	; 0x300 <_ZN7UART_BT9Uart_sendEl>
 350:	08 95       	ret

00000352 <__udivmodsi4>:
 352:	a1 e2       	ldi	r26, 0x21	; 33
 354:	1a 2e       	mov	r1, r26
 356:	aa 1b       	sub	r26, r26
 358:	bb 1b       	sub	r27, r27
 35a:	fd 01       	movw	r30, r26
 35c:	0d c0       	rjmp	.+26     	; 0x378 <__udivmodsi4_ep>

0000035e <__udivmodsi4_loop>:
 35e:	aa 1f       	adc	r26, r26
 360:	bb 1f       	adc	r27, r27
 362:	ee 1f       	adc	r30, r30
 364:	ff 1f       	adc	r31, r31
 366:	a2 17       	cp	r26, r18
 368:	b3 07       	cpc	r27, r19
 36a:	e4 07       	cpc	r30, r20
 36c:	f5 07       	cpc	r31, r21
 36e:	20 f0       	brcs	.+8      	; 0x378 <__udivmodsi4_ep>
 370:	a2 1b       	sub	r26, r18
 372:	b3 0b       	sbc	r27, r19
 374:	e4 0b       	sbc	r30, r20
 376:	f5 0b       	sbc	r31, r21

00000378 <__udivmodsi4_ep>:
 378:	66 1f       	adc	r22, r22
 37a:	77 1f       	adc	r23, r23
 37c:	88 1f       	adc	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	1a 94       	dec	r1
 382:	69 f7       	brne	.-38     	; 0x35e <__udivmodsi4_loop>
 384:	60 95       	com	r22
 386:	70 95       	com	r23
 388:	80 95       	com	r24
 38a:	90 95       	com	r25
 38c:	9b 01       	movw	r18, r22
 38e:	ac 01       	movw	r20, r24
 390:	bd 01       	movw	r22, r26
 392:	cf 01       	movw	r24, r30
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>

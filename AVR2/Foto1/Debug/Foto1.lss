
Foto1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000020a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000020a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000023c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000929  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043d  00000000  00000000  00000c4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c7  00000000  00000000  0000108a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000011c  00000000  00000000  00001454  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035a  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000314  00000000  00000000  000018ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001bde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 82 00 	call	0x104	; 0x104 <main>
  78:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <_ZN4ADC1C1Ev>:
} //ADC1

// default destructor
ADC1::~ADC1()
{
	PRR |=(1<<PRADC);			// zakaze ADC
  80:	e4 e6       	ldi	r30, 0x64	; 100
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	8e 7f       	andi	r24, 0xFE	; 254
  88:	80 83       	st	Z, r24
  8a:	08 95       	ret

0000008c <_ZN4ADC18Init_ADCEhb>:
} //~ADC1

void ADC1::Init_ADC(uint8_t hod, bool rezim){   // false - progr.start
	hod=hod&0x7;
	ADCSRA =0b10000000|hod;		// ADEN, ADSC, ADATE, ADIF, ADIE,ADPS2,1,0
  8c:	67 70       	andi	r22, 0x07	; 7
  8e:	60 68       	ori	r22, 0x80	; 128
  90:	60 93 7a 00 	sts	0x007A, r22	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	if(rezim) ADCSRA |=0x20;    // ADATE: autotriger;
  94:	44 23       	and	r20, r20
  96:	29 f0       	breq	.+10     	; 0xa2 <_ZN4ADC18Init_ADCEhb+0x16>
  98:	ea e7       	ldi	r30, 0x7A	; 122
  9a:	f0 e0       	ldi	r31, 0x00	; 0
  9c:	80 81       	ld	r24, Z
  9e:	80 62       	ori	r24, 0x20	; 32
  a0:	80 83       	st	Z, r24
  a2:	08 95       	ret

000000a4 <_ZN4ADC111Set_CHANNELEh>:
}

void ADC1::Set_CHANNEL(uint8_t kanal){	// kanal 0- F
	kanal &= 0x0F;
	ADMUX &= 0xF0;
  a4:	ec e7       	ldi	r30, 0x7C	; 124
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	80 83       	st	Z, r24
	ADMUX |= kanal;				// AVCC  010... 10bit  0110... 8bit - ADLAR=1
  ae:	80 81       	ld	r24, Z
  b0:	6f 70       	andi	r22, 0x0F	; 15
  b2:	68 2b       	or	r22, r24
  b4:	60 83       	st	Z, r22
  b6:	08 95       	ret

000000b8 <_ZN4ADC17Set_REFEh>:
};								// REFS0, REFS1, ADLAR, RES, MUX....

void ADC1::Set_REF(uint8_t ref) // REFS0; REFS1;: 0..00 ext ref, 1..01 AVcc, 2..10 res, 3..11 intref 1.1V
{
	ref=ref & 0b00000011;		// maska
	ADMUX &= 0b00111111;
  b8:	ec e7       	ldi	r30, 0x7C	; 124
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	80 81       	ld	r24, Z
  be:	8f 73       	andi	r24, 0x3F	; 63
  c0:	80 83       	st	Z, r24
	ADMUX |= (ref<<6);
  c2:	80 81       	ld	r24, Z
  c4:	62 95       	swap	r22
  c6:	66 0f       	add	r22, r22
  c8:	66 0f       	add	r22, r22
  ca:	60 7c       	andi	r22, 0xC0	; 192
  cc:	68 2b       	or	r22, r24
  ce:	60 83       	st	Z, r22
  d0:	08 95       	ret

000000d2 <_ZN4ADC17Get_ADCEv>:
};

int ADC1::Get_ADC(void){
	ADMUX &=~(1<<ADLAR);		// ADLAR=0   0b11011111;
  d2:	ec e7       	ldi	r30, 0x7C	; 124
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC);		// start
  dc:	ea e7       	ldi	r30, 0x7A	; 122
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 64       	ori	r24, 0x40	; 64
  e4:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADIF))!=(1<<ADIF)){}; // caka na koniec prevodu
  e6:	80 81       	ld	r24, Z
  e8:	84 ff       	sbrs	r24, 4
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <_ZN4ADC17Get_ADCEv+0x14>
	int prev = ADCL;
  ec:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	prev |=ADCH<<8;
  f0:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	ADCSRA |=(1<<ADIF);			// alternativa k vynulovaniu ADIF
  f4:	ea e7       	ldi	r30, 0x7A	; 122
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	90 61       	ori	r25, 0x10	; 16
  fc:	90 83       	st	Z, r25
	return prev;
  fe:	90 e0       	ldi	r25, 0x00	; 0
};
 100:	92 2b       	or	r25, r18
 102:	08 95       	ret

00000104 <main>:
#include "AKUC.h"
#include "TLACIDLO.h"
#include "ADC.h"

int main(void)
{
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	00 d0       	rcall	.+0      	; 0x10a <main+0x6>
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
	RGB_LED r;
 10e:	ce 01       	movw	r24, r28
 110:	01 96       	adiw	r24, 0x01	; 1
 112:	0e 94 bf 00 	call	0x17e	; 0x17e <_ZN7RGB_LEDC1Ev>
	ADC1 adc;
 116:	ce 01       	movw	r24, r28
 118:	02 96       	adiw	r24, 0x02	; 2
 11a:	0e 94 40 00 	call	0x80	; 0x80 <_ZN4ADC1C1Ev>

	adc.Init_ADC(4, false); // hodiny/64, jednorazovy prevod
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	64 e0       	ldi	r22, 0x04	; 4
 122:	ce 01       	movw	r24, r28
 124:	02 96       	adiw	r24, 0x02	; 2
 126:	0e 94 46 00 	call	0x8c	; 0x8c <_ZN4ADC18Init_ADCEhb>
	adc.Set_CHANNEL(6);
 12a:	66 e0       	ldi	r22, 0x06	; 6
 12c:	ce 01       	movw	r24, r28
 12e:	02 96       	adiw	r24, 0x02	; 2
 130:	0e 94 52 00 	call	0xa4	; 0xa4 <_ZN4ADC111Set_CHANNELEh>
	adc.Set_REF(1);			// Avcc
 134:	61 e0       	ldi	r22, 0x01	; 1
 136:	ce 01       	movw	r24, r28
 138:	02 96       	adiw	r24, 0x02	; 2
 13a:	0e 94 5c 00 	call	0xb8	; 0xb8 <_ZN4ADC17Set_REFEh>
    
	while (1) 
    {
		if(adc.Get_ADC() < 300)
 13e:	ce 01       	movw	r24, r28
 140:	02 96       	adiw	r24, 0x02	; 2
 142:	0e 94 69 00 	call	0xd2	; 0xd2 <_ZN4ADC17Get_ADCEv>
 146:	8c 32       	cpi	r24, 0x2C	; 44
 148:	91 40       	sbci	r25, 0x01	; 1
 14a:	44 f4       	brge	.+16     	; 0x15c <main+0x58>
			r.Zasviet_RGB(true,false,false); 
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	40 e0       	ldi	r20, 0x00	; 0
 150:	61 e0       	ldi	r22, 0x01	; 1
 152:	ce 01       	movw	r24, r28
 154:	01 96       	adiw	r24, 0x01	; 1
 156:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN7RGB_LED11Zasviet_RGBEbbb>
 15a:	07 c0       	rjmp	.+14     	; 0x16a <main+0x66>
		else
			r.Zasviet_RGB(false,false,true);
 15c:	21 e0       	ldi	r18, 0x01	; 1
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	60 e0       	ldi	r22, 0x00	; 0
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	0e 94 c7 00 	call	0x18e	; 0x18e <_ZN7RGB_LED11Zasviet_RGBEbbb>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 16a:	8f e7       	ldi	r24, 0x7F	; 127
 16c:	99 ea       	ldi	r25, 0xA9	; 169
 16e:	23 e0       	ldi	r18, 0x03	; 3
 170:	81 50       	subi	r24, 0x01	; 1
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	20 40       	sbci	r18, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0x6c>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0x76>
 17a:	00 00       	nop
 17c:	e0 cf       	rjmp	.-64     	; 0x13e <main+0x3a>

0000017e <_ZN7RGB_LEDC1Ev>:
	sbi(DDRD,LED_GREEN);
	sbi(DDRD,LED_BLUE);
} //RGB_LED

// default destructor
RGB_LED::~RGB_LED()
 17e:	54 9a       	sbi	0x0a, 4	; 10
 180:	52 9a       	sbi	0x0a, 2	; 10
 182:	57 9a       	sbi	0x0a, 7	; 10
 184:	08 95       	ret

00000186 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>:
} //~RGB_LED


void RGB_LED::Zhasni_Vsetko_RGB()
{
	sbi(PORTD,LED_RED);
 186:	5c 9a       	sbi	0x0b, 4	; 11
	sbi(PORTD,LED_GREEN);
 188:	5a 9a       	sbi	0x0b, 2	; 11
	sbi(PORTD,LED_BLUE);
 18a:	5f 9a       	sbi	0x0b, 7	; 11
 18c:	08 95       	ret

0000018e <_ZN7RGB_LED11Zasviet_RGBEbbb>:
}

void RGB_LED::Zasviet_RGB(bool r, bool g, bool b)
{
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	16 2f       	mov	r17, r22
 196:	d4 2f       	mov	r29, r20
 198:	c2 2f       	mov	r28, r18
	this->Zhasni_Vsetko_RGB();
 19a:	0e 94 c3 00 	call	0x186	; 0x186 <_ZN7RGB_LED17Zhasni_Vsetko_RGBEv>
	if(r==true) cbi(PORTD,LED_RED);
 19e:	11 11       	cpse	r17, r1
 1a0:	5c 98       	cbi	0x0b, 4	; 11
	if(g==true) cbi(PORTD,LED_GREEN);
 1a2:	d1 11       	cpse	r29, r1
 1a4:	5a 98       	cbi	0x0b, 2	; 11
	if(b==true) cbi(PORTD,LED_BLUE);
 1a6:	c1 11       	cpse	r28, r1
 1a8:	5f 98       	cbi	0x0b, 7	; 11
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	1f 91       	pop	r17
 1b0:	08 95       	ret

000001b2 <_exit>:
 1b2:	f8 94       	cli

000001b4 <__stop_program>:
 1b4:	ff cf       	rjmp	.-2      	; 0x1b4 <__stop_program>

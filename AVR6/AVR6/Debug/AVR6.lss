
AVR6.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ea  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000338  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000020b  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001f2  00000000  00000000  00000743  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  00000938  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001cd  00000000  00000000  000009b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000094  00000000  00000000  00000b7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00000c11  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include "BOARD_AVR.h"
#include "PWM0.h"

int main(void)
{
  80:	cf 93       	push	r28
  82:	df 93       	push	r29
  84:	1f 92       	push	r1
  86:	cd b7       	in	r28, 0x3d	; 61
  88:	de b7       	in	r29, 0x3e	; 62
    PWM0 pwm0;
  8a:	ce 01       	movw	r24, r28
  8c:	01 96       	adiw	r24, 0x01	; 1
  8e:	0e 94 50 00 	call	0xa0	; 0xa0 <_ZN4PWM0C1Ev>
	pwm0.Set_PWM(128, A);
  92:	40 e0       	ldi	r20, 0x00	; 0
  94:	60 e8       	ldi	r22, 0x80	; 128
  96:	ce 01       	movw	r24, r28
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	0e 94 6a 00 	call	0xd4	; 0xd4 <_ZN4PWM07Set_PWMEh5kanal>
  9e:	ff cf       	rjmp	.-2      	; 0x9e <main+0x1e>

000000a0 <_ZN4PWM0C1Ev>:
} //PWM0

// default destructor
PWM0::~PWM0()
{
	sbi(PRR,PRTIM0);		// zakazat TIM0
  a0:	e4 e6       	ldi	r30, 0x64	; 100
  a2:	f0 e0       	ldi	r31, 0x00	; 0
  a4:	80 81       	ld	r24, Z
  a6:	8f 7d       	andi	r24, 0xDF	; 223
  a8:	80 83       	st	Z, r24
  aa:	56 9a       	sbi	0x0a, 6	; 10
  ac:	55 9a       	sbi	0x0a, 5	; 10
  ae:	5e 9a       	sbi	0x0b, 6	; 11
  b0:	5d 9a       	sbi	0x0b, 5	; 11
  b2:	83 e0       	ldi	r24, 0x03	; 3
  b4:	84 bd       	out	0x24, r24	; 36
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	85 bd       	out	0x25, r24	; 37
  ba:	84 b5       	in	r24, 0x24	; 36
  bc:	80 68       	ori	r24, 0x80	; 128
  be:	84 bd       	out	0x24, r24	; 36
  c0:	84 b5       	in	r24, 0x24	; 36
  c2:	8f 7b       	andi	r24, 0xBF	; 191
  c4:	84 bd       	out	0x24, r24	; 36
  c6:	84 b5       	in	r24, 0x24	; 36
  c8:	80 62       	ori	r24, 0x20	; 32
  ca:	84 bd       	out	0x24, r24	; 36
  cc:	84 b5       	in	r24, 0x24	; 36
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	84 bd       	out	0x24, r24	; 36
  d2:	08 95       	ret

000000d4 <_ZN4PWM07Set_PWMEh5kanal>:
} //~PWM0

void PWM0::Set_PWM(uint8_t x, kanal k){  // x= 0 ...255,  A, B
	switch( k ) 
  d4:	44 23       	and	r20, r20
  d6:	19 f0       	breq	.+6      	; 0xde <_ZN4PWM07Set_PWMEh5kanal+0xa>
  d8:	41 30       	cpi	r20, 0x01	; 1
  da:	19 f0       	breq	.+6      	; 0xe2 <_ZN4PWM07Set_PWMEh5kanal+0xe>
  dc:	08 95       	ret
	{
		case 0: OCR0A = x; break;
  de:	67 bd       	out	0x27, r22	; 39
  e0:	08 95       	ret
		case 1:	OCR0B = x; break;
  e2:	68 bd       	out	0x28, r22	; 40
  e4:	08 95       	ret

000000e6 <_exit>:
  e6:	f8 94       	cli

000000e8 <__stop_program>:
  e8:	ff cf       	rjmp	.-2      	; 0xe8 <__stop_program>

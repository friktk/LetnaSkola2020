
AVR5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000013a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000016c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000019c  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000000e7  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000167  00000000  00000000  0000044f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000005b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000019c  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000110  00000000  00000000  00000778  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000888  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include "BOARD_AVR.h"

int main(void)
{
	sbi(DDRD,LED_RED);			// smer
  80:	54 9a       	sbi	0x0a, 4	; 10
	sbi(PORTD,LED_RED);			// zhasne
  82:	5c 9a       	sbi	0x0b, 4	; 11
  84:	4f ef       	ldi	r20, 0xFF	; 255
  86:	50 e0       	ldi	r21, 0x00	; 0
   
	for(uint16_t i = 0; i<256; ++i)
  88:	20 e0       	ldi	r18, 0x00	; 0
  8a:	30 e0       	ldi	r19, 0x00	; 0
	{
		cbi(PORTD,LED_RED);		// zasviet
  8c:	5c 98       	cbi	0x0b, 4	; 11
		for(uint16_t k = 0; k<i; k++)
  8e:	21 15       	cp	r18, r1
  90:	31 05       	cpc	r19, r1
  92:	29 f1       	breq	.+74     	; 0xde <main+0x5e>
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	ea ec       	ldi	r30, 0xCA	; 202
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	31 97       	sbiw	r30, 0x01	; 1
  9e:	f1 f7       	brne	.-4      	; 0x9c <main+0x1c>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x22>
  a2:	00 00       	nop
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	82 17       	cp	r24, r18
  a8:	93 07       	cpc	r25, r19
  aa:	b1 f7       	brne	.-20     	; 0x98 <main+0x18>
			_delay_us(153);		// cakaj i.153
	 
		sbi(PORTD,LED_RED);		// zhasni 
  ac:	5c 9a       	sbi	0x0b, 4	; 11
		for(uint16_t l = 0; l<(255-i); l++) 
  ae:	41 15       	cp	r20, r1
  b0:	51 05       	cpc	r21, r1
  b2:	61 f0       	breq	.+24     	; 0xcc <main+0x4c>
	sbi(PORTD,LED_RED);			// zhasne
   
	for(uint16_t i = 0; i<256; ++i)
	{
		cbi(PORTD,LED_RED);		// zasviet
		for(uint16_t k = 0; k<i; k++)
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	ea ec       	ldi	r30, 0xCA	; 202
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <main+0x3c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <main+0x42>
  c2:	00 00       	nop
			_delay_us(153);		// cakaj i.153
	 
		sbi(PORTD,LED_RED);		// zhasni 
		for(uint16_t l = 0; l<(255-i); l++) 
  c4:	01 96       	adiw	r24, 0x01	; 1
  c6:	84 17       	cp	r24, r20
  c8:	95 07       	cpc	r25, r21
  ca:	b0 f3       	brcs	.-20     	; 0xb8 <main+0x38>
int main(void)
{
	sbi(DDRD,LED_RED);			// smer
	sbi(PORTD,LED_RED);			// zhasne
   
	for(uint16_t i = 0; i<256; ++i)
  cc:	2f 5f       	subi	r18, 0xFF	; 255
  ce:	3f 4f       	sbci	r19, 0xFF	; 255
  d0:	41 50       	subi	r20, 0x01	; 1
  d2:	51 09       	sbc	r21, r1
  d4:	21 15       	cp	r18, r1
  d6:	f1 e0       	ldi	r31, 0x01	; 1
  d8:	3f 07       	cpc	r19, r31
  da:	c1 f6       	brne	.-80     	; 0x8c <main+0xc>
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x5c>
	{
		cbi(PORTD,LED_RED);		// zasviet
		for(uint16_t k = 0; k<i; k++)
			_delay_us(153);		// cakaj i.153
	 
		sbi(PORTD,LED_RED);		// zhasni 
  de:	5c 9a       	sbi	0x0b, 4	; 11
  e0:	e9 cf       	rjmp	.-46     	; 0xb4 <main+0x34>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
